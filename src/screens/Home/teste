



            {/* <StatusBar barStyle="dark-content"/>


            <MapView 
                ref={map}
                style={{flex:1}}
                provider="google"
                camera={maploc}
            >
                {fromLoc.center &&
                    <MapView.Marker pinColor="black" coordinate={fromLoc.center} />
                }
                
                {toLoc.center &&
                    <MapView.Marker pinColor="black" coordinate={toLoc.center} />
                }

                {showDirections && 
                    <MapViewDirections 
                        origin={fromLoc.center}
                        destination={toLoc.center}
                        strokeWidth={5}
                        strokeColor="black"
                        apikey={MapsAPI}
                        onReady={handleDirectionsReady}
                    />
                }

            </MapView> */
<IntineraryArea>
                <IntineraryItem onPress={handleFromClic} underlayColor="#EEE">
                    <>
                        <IntineraryLabel>
                            <IntineraryPoint color="#0000FF"/>
                            <IntineraryTitle>Origem</IntineraryTitle>
                        </IntineraryLabel>
                        {fromLoc.name &&
                            <IntineraryValue>{fromLoc.name}</IntineraryValue>
                        }
                        {!fromLoc.name &&
                             <IntineraryPlaceHolder>Escolha um local de origem</IntineraryPlaceHolder>
                        }
                    </>
                </IntineraryItem>
                <IntineraryItem onPress={handleToClic} underlayColor="#EEE">
                    <>
                        <IntineraryLabel>
                            <IntineraryPoint color="#00FF00"/>
                            <IntineraryTitle>Destino</IntineraryTitle>
                        </IntineraryLabel>
                        {toLoc.name &&
                            <IntineraryValue>{toLoc.name}</IntineraryValue>
                        }
                        {!toLoc.name &&
                             <IntineraryPlaceHolder>Escolha um local de destino</IntineraryPlaceHolder>
                        } 
                    </>
                </IntineraryItem>
            </IntineraryArea>





            const map = useRef();
    
    // const [maploc, setMapLoc] = useState({
    //     center:{
    //         latitude:37.78825,
    //         longitude:-122.4324
    //     },
    //     zoom:16,
    //     pitch:0,
    //     altitude:0,
    //     heading:0

    // // });
    // const [fromLoc, setFromLoc] = useState({});
    // const [toLoc, setToLoc] = useState({});
    // const [showDirections, setShowDirections] = useState(false);
    const [Search,setSearch] = useState('');
    // useEffect(()=>{
    //     Geocoder.init(MapsAPI, {language:'pt-br'});
    //     getMyCurrentPosition();

    // }, []);

    // useEffect(()=>{
    //     if(fromLoc.center && toLoc.center) {
    //         setShowDirections(true);
    //     }
    // },[toLoc]);

    // const getMyCurrentPosition = () => {
    //     Geolocation.getCurrentPosition(async (info)=>{
    //         const geo = await Geocoder.from(info.coords.latitude, info.coords.longitude);

    //         if(geo.results.length > 0){
    //             const loc = {
    //                 name:geo.results[0].formatted_address,
    //                 center:{
    //                     latitude:info.coords.latitude,
    //                     longitude:info.coords.longitude
    //                 },
    //                 zoom:16,
    //                 pitch:0,
    //                 altitude:0,
    //                 heading:0
    //             };
    //             setMapLoc(loc);
    //             setFromLoc(loc);
    //         }
    //         console.log(geo.results[0]);    

    //     },(error)=>{

    //     });
    // }

    // const handleFromClic = () => {
    //     alert("Você clicou aqui!");
    // }
    // const handleToClic = async () => {
    //     const geo = await Geocoder.from('Resende, Rj');
    //     if(geo.results.length > 0) {
    //         const loc = {
    //             name:geo.results[0].formatted_address,
    //             center:{
    //                 latitude:geo.results[0].geometry.location.lat,
    //                 longitude:geo.results[0].geometry.location.lng
    //             },
    //             zoom:16,
    //             pitch:0,
    //             altitude:0,
    //             heading:0
    //         };
    //         setToLoc(loc);
    //     }
    // }
    // const handleDirectionsReady = (r) => {
    //     map.current.fitToCoordinates(r.coordinates, {
    //          edgePadding:{
    //              left:50,
    //              right:50,
    //              bottom:50,
    //              top:400
    //          }
    //     });
    // }



                <Header>
                    <HeaderContent>
                        <Menu onPress={()=>('HomeDrawer')}>
                            <MenuIcon source={require("../../assets/Images/Icons/MenuIcon.png")} resizeMode='contain'/>   
                        </Menu>
                            <InputSearch 
                                value={Search} 
                                onChangeText={t=>setSearch(t)} 
                                placeholder="Para onde você vai?" 
                                placeholderTextColor={color.Cinza}/>
                            <SearchButton onPress={()=>{}}>
                                    <SearchIcon source={require("../../assets/Images/Icons/SearchIcon.png")}/>
                            </SearchButton>   
                    </HeaderContent>
                </Header>



                export const Container = styled.SafeAreaView`
    flex:1; 
    background-color:${color.CinzaSemiTransparente};
`;
export const Header = styled.View`
    background-color:${color.Azul};
    width:100%;
    height:106px;
    justify-content:center;
    align-items:center;
`;
export const HeaderContent = styled.View`
    width:84%;
    height:46%; 
    background-color:rgba(255, 255, 255, 0.9);
    border-radius:6.62px;
    flex-direction:row;
    justify-content:center;
    align-items:center;
`;
export const Menu = styled.TouchableOpacity`
    width:9.6%;
    height:68%; 
    justify-content:center;
    align-items:center;  
`;
export const MenuIcon = styled.Image`
    width:76%;
    height:76%;  
`;
export const InputSearch = styled.TextInput`
    width:64%;
    height:120%;  
    margin-left:13px;
    color:${color.Preto};
`;
export const SearchButton = styled.TouchableOpacity`
    width:10.5%;
    height:72%;   
    margin-left:12px;
`;
export const SearchIcon = styled.Image`  
    width:93%;
    height:93%;
`;